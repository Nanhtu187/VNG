// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: BE/v1/be.proto

package iam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BeService_StringProcess_FullMethodName = "/be.v1.BeService/StringProcess"
)

// BeServiceClient is the client API for BeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeServiceClient interface {
	StringProcess(ctx context.Context, in *StringProcessRequest, opts ...grpc.CallOption) (*StringProcessResponse, error)
}

type beServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeServiceClient(cc grpc.ClientConnInterface) BeServiceClient {
	return &beServiceClient{cc}
}

func (c *beServiceClient) StringProcess(ctx context.Context, in *StringProcessRequest, opts ...grpc.CallOption) (*StringProcessResponse, error) {
	out := new(StringProcessResponse)
	err := c.cc.Invoke(ctx, BeService_StringProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeServiceServer is the server API for BeService service.
// All implementations must embed UnimplementedBeServiceServer
// for forward compatibility
type BeServiceServer interface {
	StringProcess(context.Context, *StringProcessRequest) (*StringProcessResponse, error)
	mustEmbedUnimplementedBeServiceServer()
}

// UnimplementedBeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBeServiceServer struct {
}

func (UnimplementedBeServiceServer) StringProcess(context.Context, *StringProcessRequest) (*StringProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StringProcess not implemented")
}
func (UnimplementedBeServiceServer) mustEmbedUnimplementedBeServiceServer() {}

// UnsafeBeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeServiceServer will
// result in compilation errors.
type UnsafeBeServiceServer interface {
	mustEmbedUnimplementedBeServiceServer()
}

func RegisterBeServiceServer(s grpc.ServiceRegistrar, srv BeServiceServer) {
	s.RegisterService(&BeService_ServiceDesc, srv)
}

func _BeService_StringProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeServiceServer).StringProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeService_StringProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeServiceServer).StringProcess(ctx, req.(*StringProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeService_ServiceDesc is the grpc.ServiceDesc for BeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "be.v1.BeService",
	HandlerType: (*BeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StringProcess",
			Handler:    _BeService_StringProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BE/v1/be.proto",
}
